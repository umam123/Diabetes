# -*- coding: utf-8 -*-
"""Diabetes KNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KMR1pa1MrWAUibp1W91Myk5DIJhttHnP
"""

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

from sklearn.model_selection import GridSearchCV

# import user dataset from spreadsheet
sheet_url = 'https://docs.google.com/spreadsheets/d/1MakojMWlOLj67uA1fdtuY6wV4KbOu-Ajpu_c_ilJ11M/edit#gid=62226210'
sheet_url_trf = sheet_url.replace('/edit#gid=', '/export?format=csv&gid=') #to convert spreadsheet format become CSV then collab can import it
df_train = pd.read_csv(sheet_url_trf) #define df to read csv
pd.set_option('display.max.columns',None) #to display all column, not separate)
df_train.head() #only show first of 5 rows (not based on shorting etc)

X_train = df_train.values
X_train = np.delete(X_train,8, axis=1)

y_train = df_train['Outcome'].values

# import user dataset from spreadsheet
sheet_url = 'https://docs.google.com/spreadsheets/d/1XMGkvTBF6T0rFpcVsVwvocqSdk2Apu57Dl6SI1peOA0/edit#gid=807630213'
sheet_url_trf = sheet_url.replace('/edit#gid=', '/export?format=csv&gid=') #to convert spreadsheet format become CSV then collab can import it
df_test= pd.read_csv(sheet_url_trf) #define df to read csv
pd.set_option('display.max.columns',None) #to display all column, not separate)
df_test.head() #only show first of 5 rows (not based on shorting etc)

X_test = df_test.values
X_test = np.delete(X_test,8,axis=1)

y_test = df_test['Outcome'].values

#KNN Tanpa Tuning
knn_clf = KNeighborsClassifier(n_neighbors=3)
knn_clf.fit(X_train, y_train)

y_pred = knn_clf.predict (X_test)

round(accuracy_score(y_test,y_pred),3)

#Mencari Prameter Optimal
param_grid = {'n_neighbors' : np.arange(1,201)}

knn_clf = GridSearchCV (KNeighborsClassifier(), param_grid, cv=3, scoring='accuracy')

knn_clf.fit(X_train, y_train)
knn_clf.best_params_

#KNN Tanpa Dengan Tuning
knn_clf = KNeighborsClassifier(n_neighbors=9)
knn_clf.fit(X_train, y_train)

y_pred = knn_clf.predict (X_test)

round(accuracy_score(y_test,y_pred),4)

import pickle

with open('KNN_pickel','wb') as r :
  pickle.dump (knn_clf, r)

with open ('KNN_pickel', 'rb') as r :
  mknn_clf = pickle.load(r)

y_pred = knn_clf.predict (X_test)

round(accuracy_score(y_test,y_pred),4)
